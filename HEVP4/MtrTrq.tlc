%% file : MtrTrq.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for MtrTrq
%% 
%% Simulink version      : 23.2 (R2023b) 01-Aug-2023
%% TLC file generated on : 18-Nov-2023 00:52:41

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'MtrTrq';
     def.OutputFcnSpec = 'void MtrTrq(double u1, double u2, double u3, double u4, double u5, double u6, double y1[1], double y2[1])';
     def.HeaderFiles = {'engtrq_lib.h'};
     def.SourceFiles = {'QLearningCodeNoCSV_MtrTrq.c'};
     def.IncPaths = {'D:\HEVP41\HEVP4\'};
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements MtrTrq "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("MtrTrq_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        

        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("MtrTrq_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif

        #include "engtrq_lib.h"

        

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("engtrq_lib.h")>
    %endif
    %<SLibAddToStaticSources("QLearningCodeNoCSV_MtrTrq.c")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %assign doubleType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
        %assign hFileName = FcnGenerateUniqueFileName("MtrTrq_wrapper_%<sfunInstanceName>", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        extern void MtrTrq_wrapper_Output_%<sfunInstanceName>(const %<doubleType> u1, const %<doubleType> u2, const %<doubleType> u3, const %<doubleType> u4, const %<doubleType> u5, const %<doubleType> u6,  %<doubleType>* y1,  %<doubleType>* y2);
        
        #endif
        
        %closefile hFile
        
        %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
        %assign cFileName = FcnGenerateUniqueFileName("MtrTrq_wrapper_%<sfunInstanceName>", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif

        #include "engtrq_lib.h"

        void MtrTrq_wrapper_Output_%<sfunInstanceName>(const %<doubleType> u1, const %<doubleType> u2, const %<doubleType> u3, const %<doubleType> u4, const %<doubleType> u5, const %<doubleType> u6,  %<doubleType>* y1,  %<doubleType>* y2) {
            MtrTrq((%<doubleType>)(u1), (%<doubleType>)(u2), (%<doubleType>)(u3), (%<doubleType>)(u4), (%<doubleType>)(u5), (%<doubleType>)(u6), y1, y2);
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1_val = LibBlockInputSignal(0, "", "", 0)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign u3_val = LibBlockInputSignal(2, "", "", 0)
        %assign u4_val = LibBlockInputSignal(3, "", "", 0)
        %assign u5_val = LibBlockInputSignal(4, "", "", 0)
        %assign u6_val = LibBlockInputSignal(5, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
            MtrTrq_wrapper_Output_%<sfunInstanceName>(%<u1_val>, %<u2_val>, %<u3_val>, %<u4_val>, %<u5_val>, %<u6_val>, %<y1_ptr>, %<y2_ptr>);
        
        }
    %else
        %assign u1_val = LibBlockInputSignal(0, "", "", 0)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign u3_val = LibBlockInputSignal(2, "", "", 0)
        %assign u4_val = LibBlockInputSignal(3, "", "", 0)
        %assign u5_val = LibBlockInputSignal(4, "", "", 0)
        %assign u6_val = LibBlockInputSignal(5, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %% 
        MtrTrq(%<u1_val>, %<u2_val>, %<u3_val>, %<u4_val>, %<u5_val>, %<u6_val>, %<y1_ptr>, %<y2_ptr>);
    %endif
%endfunction

%% [EOF]
